//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("HODORModel", "FK_Download_Zu_Benutzer", "Benutzer", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Benutzer), "Download_History", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Download_History), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Rolle", "Rolle", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Rolle), "Benutzer", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Benutzer), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Build_Zu_Oberrelease", "Subrelease", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Subrelease), "Build", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Build), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Download_Zu_Build", "Build", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Build), "Download_History", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Download_History), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Lizensiertes_Release", "Release", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Release), "Lizenz_Versionsorientiert", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Lizenz_Versionsorientiert), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Lizensiertes_Programm", "Programm", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Programm), "Lizenz_Zeitlich", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Lizenz_Zeitlich), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Release_Von_Programm", "Programm", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Programm), "Release", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Release), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "FK_Subrelease_Zu_OberRelease", "Release", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(HODOR.Release), "Subrelease", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Subrelease), true)]
[assembly: EdmRelationshipAttribute("HODORModel", "Benutzer_Zu_Lizenz", "Benutzer", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Benutzer), "Lizenz", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(HODOR.Lizenz))]

#endregion

namespace HODOR
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class HODOR_entities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new HODOR_entities object using the connection string found in the 'HODOR_entities' section of the application configuration file.
        /// </summary>
        public HODOR_entities() : base("name=HODOR_entities", "HODOR_entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new HODOR_entities object.
        /// </summary>
        public HODOR_entities(string connectionString) : base(connectionString, "HODOR_entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new HODOR_entities object.
        /// </summary>
        public HODOR_entities(EntityConnection connection) : base(connection, "HODOR_entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Benutzer> Benutzers
        {
            get
            {
                if ((_Benutzers == null))
                {
                    _Benutzers = base.CreateObjectSet<Benutzer>("Benutzers");
                }
                return _Benutzers;
            }
        }
        private ObjectSet<Benutzer> _Benutzers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Download_History> Download_History
        {
            get
            {
                if ((_Download_History == null))
                {
                    _Download_History = base.CreateObjectSet<Download_History>("Download_History");
                }
                return _Download_History;
            }
        }
        private ObjectSet<Download_History> _Download_History;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Lizenz> Lizenzs
        {
            get
            {
                if ((_Lizenzs == null))
                {
                    _Lizenzs = base.CreateObjectSet<Lizenz>("Lizenzs");
                }
                return _Lizenzs;
            }
        }
        private ObjectSet<Lizenz> _Lizenzs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Programm> Programms
        {
            get
            {
                if ((_Programms == null))
                {
                    _Programms = base.CreateObjectSet<Programm>("Programms");
                }
                return _Programms;
            }
        }
        private ObjectSet<Programm> _Programms;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Release> Releases
        {
            get
            {
                if ((_Releases == null))
                {
                    _Releases = base.CreateObjectSet<Release>("Releases");
                }
                return _Releases;
            }
        }
        private ObjectSet<Release> _Releases;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Rolle> Rolles
        {
            get
            {
                if ((_Rolles == null))
                {
                    _Rolles = base.CreateObjectSet<Rolle>("Rolles");
                }
                return _Rolles;
            }
        }
        private ObjectSet<Rolle> _Rolles;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Benutzers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBenutzers(Benutzer benutzer)
        {
            base.AddObject("Benutzers", benutzer);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Download_History EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDownload_History(Download_History download_History)
        {
            base.AddObject("Download_History", download_History);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Lizenzs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLizenzs(Lizenz lizenz)
        {
            base.AddObject("Lizenzs", lizenz);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Programms EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProgramms(Programm programm)
        {
            base.AddObject("Programms", programm);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Releases EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReleases(Release release)
        {
            base.AddObject("Releases", release);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Rolles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRolles(Rolle rolle)
        {
            base.AddObject("Rolles", rolle);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Benutzer")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Benutzer : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Benutzer object.
        /// </summary>
        /// <param name="benutzerID">Initial value of the BenutzerID property.</param>
        /// <param name="nutzerNr">Initial value of the NutzerNr property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="rolleID">Initial value of the RolleID property.</param>
        public static Benutzer CreateBenutzer(global::System.String email, global::System.String name, global::System.Int32 rolleID)
        {
            Benutzer benutzer = new Benutzer();
            benutzer.Email = email;
            benutzer.Name = name;
            benutzer.RolleID = rolleID;
            return benutzer;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BenutzerID
        {
            get
            {
                return _BenutzerID;
            }
            private set
            {
                if (_BenutzerID != value)
                {
                    OnBenutzerIDChanging(value);
                    ReportPropertyChanging("BenutzerID");
                    _BenutzerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("BenutzerID");
                    OnBenutzerIDChanged();
                }
            }
        }
        private global::System.Int32 _BenutzerID;
        partial void OnBenutzerIDChanging(global::System.Int32 value);
        partial void OnBenutzerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NutzerNr
        {
            get
            {
                return _NutzerNr;
            }
            set
            {
                OnNutzerNrChanging(value);
                ReportPropertyChanging("NutzerNr");
                _NutzerNr = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("NutzerNr");
                OnNutzerNrChanged();
            }
        }
        private global::System.String _NutzerNr;
        partial void OnNutzerNrChanging(global::System.String value);
        partial void OnNutzerNrChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PasswortHash
        {
            get
            {
                return _PasswortHash;
            }
            set
            {
                OnPasswortHashChanging(value);
                ReportPropertyChanging("PasswortHash");
                _PasswortHash = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PasswortHash");
                OnPasswortHashChanged();
            }
        }
        private global::System.String _PasswortHash;
        partial void OnPasswortHashChanging(global::System.String value);
        partial void OnPasswortHashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RolleID
        {
            get
            {
                return _RolleID;
            }
            set
            {
                OnRolleIDChanging(value);
                ReportPropertyChanging("RolleID");
                _RolleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RolleID");
                OnRolleIDChanged();
            }
        }
        private global::System.Int32 _RolleID;
        partial void OnRolleIDChanging(global::System.Int32 value);
        partial void OnRolleIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Download_Zu_Benutzer", "Download_History")]
        public EntityCollection<Download_History> Download_History
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Download_History>("HODORModel.FK_Download_Zu_Benutzer", "Download_History");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Download_History>("HODORModel.FK_Download_Zu_Benutzer", "Download_History", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Rolle", "Rolle")]
        public Rolle Rolle
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rolle>("HODORModel.FK_Rolle", "Rolle").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rolle>("HODORModel.FK_Rolle", "Rolle").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Rolle> RolleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Rolle>("HODORModel.FK_Rolle", "Rolle");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Rolle>("HODORModel.FK_Rolle", "Rolle", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "Benutzer_Zu_Lizenz", "Lizenz")]
        public EntityCollection<Lizenz> Lizenzs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Lizenz>("HODORModel.Benutzer_Zu_Lizenz", "Lizenz");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Lizenz>("HODORModel.Benutzer_Zu_Lizenz", "Lizenz", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Build")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Build : Release
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Build object.
        /// </summary>
        /// <param name="releaseID">Initial value of the ReleaseID property.</param>
        /// <param name="releaseVonProgramm">Initial value of the ReleaseVonProgramm property.</param>
        /// <param name="releasedatum">Initial value of the Releasedatum property.</param>
        /// <param name="releasenummer">Initial value of the Releasenummer property.</param>
        /// <param name="buildVonSubrelease">Initial value of the BuildVonSubrelease property.</param>
        public static Build CreateBuild(global::System.DateTime releasedatum, global::System.Int32 releasenummer, global::System.Int32 buildVonSubrelease)
        {
            Build build = new Build();
            build.Releasedatum = releasedatum;
            build.Releasenummer = releasenummer;
            build.BuildVonSubrelease = buildVonSubrelease;
            return build;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildVonSubrelease
        {
            get
            {
                return _BuildVonSubrelease;
            }
            set
            {
                OnBuildVonSubreleaseChanging(value);
                ReportPropertyChanging("BuildVonSubrelease");
                _BuildVonSubrelease = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildVonSubrelease");
                OnBuildVonSubreleaseChanged();
            }
        }
        private global::System.Int32 _BuildVonSubrelease;
        partial void OnBuildVonSubreleaseChanging(global::System.Int32 value);
        partial void OnBuildVonSubreleaseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Datendateipfad
        {
            get
            {
                return _Datendateipfad;
            }
            set
            {
                OnDatendateipfadChanging(value);
                ReportPropertyChanging("Datendateipfad");
                _Datendateipfad = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Datendateipfad");
                OnDatendateipfadChanged();
            }
        }
        private global::System.String _Datendateipfad;
        partial void OnDatendateipfadChanging(global::System.String value);
        partial void OnDatendateipfadChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Build_Zu_Oberrelease", "Subrelease")]
        public Subrelease Subrelease
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subrelease>("HODORModel.FK_Build_Zu_Oberrelease", "Subrelease").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subrelease>("HODORModel.FK_Build_Zu_Oberrelease", "Subrelease").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subrelease> SubreleaseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subrelease>("HODORModel.FK_Build_Zu_Oberrelease", "Subrelease");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subrelease>("HODORModel.FK_Build_Zu_Oberrelease", "Subrelease", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Download_Zu_Build", "Download_History")]
        public EntityCollection<Download_History> Download_History
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Download_History>("HODORModel.FK_Download_Zu_Build", "Download_History");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Download_History>("HODORModel.FK_Download_Zu_Build", "Download_History", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Download_History")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Download_History : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Download_History object.
        /// </summary>
        /// <param name="downloadHistoryID">Initial value of the DownloadHistoryID property.</param>
        /// <param name="benutzerID">Initial value of the BenutzerID property.</param>
        /// <param name="buildID">Initial value of the BuildID property.</param>
        /// <param name="downloadDatum">Initial value of the DownloadDatum property.</param>
        public static Download_History CreateDownload_History(global::System.Int32 benutzerID, global::System.Int32 buildID, global::System.DateTime downloadDatum)
        {
            Download_History download_History = new Download_History();
            download_History.BenutzerID = benutzerID;
            download_History.BuildID = buildID;
            download_History.DownloadDatum = downloadDatum;
            return download_History;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DownloadHistoryID
        {
            get
            {
                return _DownloadHistoryID;
            }
            set
            {
                if (_DownloadHistoryID != value)
                {
                    OnDownloadHistoryIDChanging(value);
                    ReportPropertyChanging("DownloadHistoryID");
                    _DownloadHistoryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DownloadHistoryID");
                    OnDownloadHistoryIDChanged();
                }
            }
        }
        private global::System.Int32 _DownloadHistoryID;
        partial void OnDownloadHistoryIDChanging(global::System.Int32 value);
        partial void OnDownloadHistoryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BenutzerID
        {
            get
            {
                return _BenutzerID;
            }
            set
            {
                OnBenutzerIDChanging(value);
                ReportPropertyChanging("BenutzerID");
                _BenutzerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BenutzerID");
                OnBenutzerIDChanged();
            }
        }
        private global::System.Int32 _BenutzerID;
        partial void OnBenutzerIDChanging(global::System.Int32 value);
        partial void OnBenutzerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildID
        {
            get
            {
                return _BuildID;
            }
            set
            {
                OnBuildIDChanging(value);
                ReportPropertyChanging("BuildID");
                _BuildID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildID");
                OnBuildIDChanged();
            }
        }
        private global::System.Int32 _BuildID;
        partial void OnBuildIDChanging(global::System.Int32 value);
        partial void OnBuildIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DownloadDatum
        {
            get
            {
                return _DownloadDatum;
            }
            set
            {
                OnDownloadDatumChanging(value);
                ReportPropertyChanging("DownloadDatum");
                _DownloadDatum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DownloadDatum");
                OnDownloadDatumChanged();
            }
        }
        private global::System.DateTime _DownloadDatum;
        partial void OnDownloadDatumChanging(global::System.DateTime value);
        partial void OnDownloadDatumChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Download_Zu_Benutzer", "Benutzer")]
        public Benutzer Benutzer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Benutzer>("HODORModel.FK_Download_Zu_Benutzer", "Benutzer").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Benutzer>("HODORModel.FK_Download_Zu_Benutzer", "Benutzer").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Benutzer> BenutzerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Benutzer>("HODORModel.FK_Download_Zu_Benutzer", "Benutzer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Benutzer>("HODORModel.FK_Download_Zu_Benutzer", "Benutzer", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Download_Zu_Build", "Build")]
        public Build Build
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Build>("HODORModel.FK_Download_Zu_Build", "Build").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Build>("HODORModel.FK_Download_Zu_Build", "Build").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Build> BuildReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Build>("HODORModel.FK_Download_Zu_Build", "Build");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Build>("HODORModel.FK_Download_Zu_Build", "Build", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Lizenz")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(Lizenz_Versionsorientiert))]
    [KnownTypeAttribute(typeof(Lizenz_Zeitlich))]
    public abstract partial class Lizenz : EntityObject
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LizenzID
        {
            get
            {
                return _LizenzID;
            }
            private set
            {
                if (_LizenzID != value)
                {
                    OnLizenzIDChanging(value);
                    ReportPropertyChanging("LizenzID");
                    _LizenzID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LizenzID");
                    OnLizenzIDChanged();
                }
            }
        }
        private global::System.Int32 _LizenzID;
        partial void OnLizenzIDChanging(global::System.Int32 value);
        partial void OnLizenzIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "Benutzer_Zu_Lizenz", "Benutzer")]
        public EntityCollection<Benutzer> Benutzers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Benutzer>("HODORModel.Benutzer_Zu_Lizenz", "Benutzer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Benutzer>("HODORModel.Benutzer_Zu_Lizenz", "Benutzer", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Lizenz_Versionsorientiert")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Lizenz_Versionsorientiert : Lizenz
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Lizenz_Versionsorientiert object.
        /// </summary>
        /// <param name="versionserhöhung">Initial value of the Versionserhöhung property.</param>
        /// <param name="lizensiertRelease">Initial value of the LizensiertRelease property.</param>
        public static Lizenz_Versionsorientiert CreateLizenz_Versionsorientiert(global::System.Int32 versionserhöhung, global::System.Int32 lizensiertRelease)
        {
            Lizenz_Versionsorientiert lizenz_Versionsorientiert = new Lizenz_Versionsorientiert();
            lizenz_Versionsorientiert.Versionserhöhung = versionserhöhung;
            lizenz_Versionsorientiert.LizensiertRelease = lizensiertRelease;
            return lizenz_Versionsorientiert;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Versionserhöhung
        {
            get
            {
                return _Versionserhöhung;
            }
            set
            {
                OnVersionserhöhungChanging(value);
                ReportPropertyChanging("Versionserhöhung");
                _Versionserhöhung = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Versionserhöhung");
                OnVersionserhöhungChanged();
            }
        }
        private global::System.Int32 _Versionserhöhung;
        partial void OnVersionserhöhungChanging(global::System.Int32 value);
        partial void OnVersionserhöhungChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LizensiertRelease
        {
            get
            {
                return _LizensiertRelease;
            }
            set
            {
                OnLizensiertReleaseChanging(value);
                ReportPropertyChanging("LizensiertRelease");
                _LizensiertRelease = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LizensiertRelease");
                OnLizensiertReleaseChanged();
            }
        }
        private global::System.Int32 _LizensiertRelease;
        partial void OnLizensiertReleaseChanging(global::System.Int32 value);
        partial void OnLizensiertReleaseChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Lizensiertes_Release", "Release")]
        public Release Release
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Lizensiertes_Release", "Release").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Lizensiertes_Release", "Release").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Release> ReleaseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Lizensiertes_Release", "Release");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Release>("HODORModel.FK_Lizensiertes_Release", "Release", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Lizenz_Zeitlich")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Lizenz_Zeitlich : Lizenz
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Lizenz_Zeitlich object.
        /// </summary>
        /// <param name="lizensiertProgramm">Initial value of the LizensiertProgramm property.</param>
        /// <param name="startDatum">Initial value of the StartDatum property.</param>
        /// <param name="endDatum">Initial value of the EndDatum property.</param>
        public static Lizenz_Zeitlich CreateLizenz_Zeitlich(global::System.DateTime startDatum, global::System.DateTime endDatum)
        {
            Lizenz_Zeitlich lizenz_Zeitlich = new Lizenz_Zeitlich();
            lizenz_Zeitlich.StartDatum = startDatum;
            lizenz_Zeitlich.EndDatum = endDatum;
            return lizenz_Zeitlich;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LizensiertProgramm
        {
            get
            {
                return _LizensiertProgramm;
            }
            set
            {
                OnLizensiertProgrammChanging(value);
                ReportPropertyChanging("LizensiertProgramm");
                _LizensiertProgramm = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LizensiertProgramm");
                OnLizensiertProgrammChanged();
            }
        }
        private global::System.Int32 _LizensiertProgramm;
        partial void OnLizensiertProgrammChanging(global::System.Int32 value);
        partial void OnLizensiertProgrammChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDatum
        {
            get
            {
                return _StartDatum;
            }
            set
            {
                OnStartDatumChanging(value);
                ReportPropertyChanging("StartDatum");
                _StartDatum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDatum");
                OnStartDatumChanged();
            }
        }
        private global::System.DateTime _StartDatum;
        partial void OnStartDatumChanging(global::System.DateTime value);
        partial void OnStartDatumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndDatum
        {
            get
            {
                return _EndDatum;
            }
            set
            {
                OnEndDatumChanging(value);
                ReportPropertyChanging("EndDatum");
                _EndDatum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDatum");
                OnEndDatumChanged();
            }
        }
        private global::System.DateTime _EndDatum;
        partial void OnEndDatumChanging(global::System.DateTime value);
        partial void OnEndDatumChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Lizensiertes_Programm", "Programm")]
        public Programm Programm
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Lizensiertes_Programm", "Programm").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Lizensiertes_Programm", "Programm").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Programm> ProgrammReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Lizensiertes_Programm", "Programm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Programm>("HODORModel.FK_Lizensiertes_Programm", "Programm", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Programm")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Programm : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Programm object.
        /// </summary>
        /// <param name="programmID">Initial value of the ProgrammID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Programm CreateProgramm(global::System.String name)
        {
            Programm programm = new Programm();
            programm.Name = name;
            return programm;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProgrammID
        {
            get
            {
                return _ProgrammID;
            }
            set
            {
                if (_ProgrammID != value)
                {
                    OnProgrammIDChanging(value);
                    ReportPropertyChanging("ProgrammID");
                    _ProgrammID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProgrammID");
                    OnProgrammIDChanged();
                }
            }
        }
        private global::System.Int32 _ProgrammID;
        partial void OnProgrammIDChanging(global::System.Int32 value);
        partial void OnProgrammIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Lizensiertes_Programm", "Lizenz_Zeitlich")]
        public EntityCollection<Lizenz_Zeitlich> Lizenz_Zeitlich
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Lizenz_Zeitlich>("HODORModel.FK_Lizensiertes_Programm", "Lizenz_Zeitlich");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Lizenz_Zeitlich>("HODORModel.FK_Lizensiertes_Programm", "Lizenz_Zeitlich", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Release_Von_Programm", "Release")]
        public EntityCollection<Release> Releases
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Release>("HODORModel.FK_Release_Von_Programm", "Release");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Release>("HODORModel.FK_Release_Von_Programm", "Release", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Release")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(Subrelease))]
    [KnownTypeAttribute(typeof(Build))]
    public partial class Release : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Release object.
        /// </summary>
        /// <param name="releaseID">Initial value of the ReleaseID property.</param>
        /// <param name="releaseVonProgramm">Initial value of the ReleaseVonProgramm property.</param>
        /// <param name="releasedatum">Initial value of the Releasedatum property.</param>
        /// <param name="releasenummer">Initial value of the Releasenummer property.</param>
        public static Release CreateRelease(global::System.Int32 releaseVonProgramm, global::System.DateTime releasedatum, global::System.Int32 releasenummer)
        {
            Release release = new Release();
            release.ReleaseVonProgramm = releaseVonProgramm;
            release.Releasedatum = releasedatum;
            release.Releasenummer = releasenummer;
            return release;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReleaseID
        {
            get
            {
                return _ReleaseID;
            }
            set
            {
                if (_ReleaseID != value)
                {
                    OnReleaseIDChanging(value);
                    ReportPropertyChanging("ReleaseID");
                    _ReleaseID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReleaseID");
                    OnReleaseIDChanged();
                }
            }
        }
        private global::System.Int32 _ReleaseID;
        partial void OnReleaseIDChanging(global::System.Int32 value);
        partial void OnReleaseIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReleaseVonProgramm
        {
            get
            {
                return _ReleaseVonProgramm;
            }
            set
            {
                OnReleaseVonProgrammChanging(value);
                ReportPropertyChanging("ReleaseVonProgramm");
                _ReleaseVonProgramm = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReleaseVonProgramm");
                OnReleaseVonProgrammChanged();
            }
        }
        private global::System.Int32 _ReleaseVonProgramm;
        partial void OnReleaseVonProgrammChanging(global::System.Int32 value);
        partial void OnReleaseVonProgrammChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Releasedatum
        {
            get
            {
                return _Releasedatum;
            }
            set
            {
                OnReleasedatumChanging(value);
                ReportPropertyChanging("Releasedatum");
                _Releasedatum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Releasedatum");
                OnReleasedatumChanged();
            }
        }
        private global::System.DateTime _Releasedatum;
        partial void OnReleasedatumChanging(global::System.DateTime value);
        partial void OnReleasedatumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Releasenummer
        {
            get
            {
                return _Releasenummer;
            }
            set
            {
                OnReleasenummerChanging(value);
                ReportPropertyChanging("Releasenummer");
                _Releasenummer = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Releasenummer");
                OnReleasenummerChanged();
            }
        }
        private global::System.Int32 _Releasenummer;
        partial void OnReleasenummerChanging(global::System.Int32 value);
        partial void OnReleasenummerChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Lizensiertes_Release", "Lizenz_Versionsorientiert")]
        public EntityCollection<Lizenz_Versionsorientiert> Lizenz_Versionsorientiert
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Lizenz_Versionsorientiert>("HODORModel.FK_Lizensiertes_Release", "Lizenz_Versionsorientiert");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Lizenz_Versionsorientiert>("HODORModel.FK_Lizensiertes_Release", "Lizenz_Versionsorientiert", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Release_Von_Programm", "Programm")]
        public Programm Programm
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Release_Von_Programm", "Programm").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Release_Von_Programm", "Programm").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Programm> ProgrammReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Programm>("HODORModel.FK_Release_Von_Programm", "Programm");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Programm>("HODORModel.FK_Release_Von_Programm", "Programm", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Subrelease_Zu_OberRelease", "Subrelease")]
        public EntityCollection<Subrelease> Subreleases
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Subrelease>("HODORModel.FK_Subrelease_Zu_OberRelease", "Subrelease");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Subrelease>("HODORModel.FK_Subrelease_Zu_OberRelease", "Subrelease", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Rolle")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Rolle : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Rolle object.
        /// </summary>
        /// <param name="rolleID">Initial value of the RolleID property.</param>
        /// <param name="rollenname">Initial value of the Rollenname property.</param>
        public static Rolle CreateRolle(global::System.String rollenname)
        {
            Rolle rolle = new Rolle();
            rolle.Rollenname = rollenname;
            return rolle;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RolleID
        {
            get
            {
                return _RolleID;
            }
            set
            {
                if (_RolleID != value)
                {
                    OnRolleIDChanging(value);
                    ReportPropertyChanging("RolleID");
                    _RolleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RolleID");
                    OnRolleIDChanged();
                }
            }
        }
        private global::System.Int32 _RolleID;
        partial void OnRolleIDChanging(global::System.Int32 value);
        partial void OnRolleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Rollenname
        {
            get
            {
                return _Rollenname;
            }
            set
            {
                OnRollennameChanging(value);
                ReportPropertyChanging("Rollenname");
                _Rollenname = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Rollenname");
                OnRollennameChanged();
            }
        }
        private global::System.String _Rollenname;
        partial void OnRollennameChanging(global::System.String value);
        partial void OnRollennameChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Rolle", "Benutzer")]
        public EntityCollection<Benutzer> Benutzers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Benutzer>("HODORModel.FK_Rolle", "Benutzer");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Benutzer>("HODORModel.FK_Rolle", "Benutzer", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="HODORModel", Name="Subrelease")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Subrelease : Release
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Subrelease object.
        /// </summary>
        /// <param name="releaseID">Initial value of the ReleaseID property.</param>
        /// <param name="releaseVonProgramm">Initial value of the ReleaseVonProgramm property.</param>
        /// <param name="releasedatum">Initial value of the Releasedatum property.</param>
        /// <param name="releasenummer">Initial value of the Releasenummer property.</param>
        /// <param name="subreleaseVonRelease">Initial value of the SubreleaseVonRelease property.</param>
        public static Subrelease CreateSubrelease(global::System.Int32 releaseVonProgramm, global::System.DateTime releasedatum, global::System.Int32 releasenummer, global::System.Int32 subreleaseVonRelease)
        {
            Subrelease subrelease = new Subrelease();
            subrelease.ReleaseVonProgramm = releaseVonProgramm;
            subrelease.Releasedatum = releasedatum;
            subrelease.Releasenummer = releasenummer;
            subrelease.SubreleaseVonRelease = subreleaseVonRelease;
            return subrelease;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubreleaseVonRelease
        {
            get
            {
                return _SubreleaseVonRelease;
            }
            set
            {
                OnSubreleaseVonReleaseChanging(value);
                ReportPropertyChanging("SubreleaseVonRelease");
                _SubreleaseVonRelease = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubreleaseVonRelease");
                OnSubreleaseVonReleaseChanged();
            }
        }
        private global::System.Int32 _SubreleaseVonRelease;
        partial void OnSubreleaseVonReleaseChanging(global::System.Int32 value);
        partial void OnSubreleaseVonReleaseChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Build_Zu_Oberrelease", "Build")]
        public EntityCollection<Build> Builds
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Build>("HODORModel.FK_Build_Zu_Oberrelease", "Build");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Build>("HODORModel.FK_Build_Zu_Oberrelease", "Build", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("HODORModel", "FK_Subrelease_Zu_OberRelease", "Release")]
        public Release Release
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Subrelease_Zu_OberRelease", "Release").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Subrelease_Zu_OberRelease", "Release").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Release> ReleaseReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Release>("HODORModel.FK_Subrelease_Zu_OberRelease", "Release");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Release>("HODORModel.FK_Subrelease_Zu_OberRelease", "Release", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
